Index: app/src/main/java/com/stoneCode/rain_alert/ui/map/DirectMapOverlay.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.stoneCode.rain_alert.ui.map\r\n\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.util.Log\r\nimport androidx.compose.runtime.*\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory\r\nimport com.google.android.gms.maps.model.LatLngBounds\r\nimport com.google.maps.android.compose.GroundOverlay\r\nimport com.google.maps.android.compose.GroundOverlayPosition\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.withContext\r\nimport java.io.InputStream\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\n/**\r\n * A Composable that adds a ground overlay to a Google Map using Jetpack Compose.\r\n * Enhanced version with better error handling and loading indicator.\r\n *\r\n * This file is unchanged from before; the main layering fixes are done by adjusting\r\n * z-indexes in the call sites (i.e., RadarMapComponent).\r\n */\r\n@Composable\r\nfun WeatherOverlay(\r\n    imageUrl: String?,\r\n    visible: Boolean = true,\r\n    bounds: LatLngBounds = LatLngBounds.builder()\r\n        .include(com.google.android.gms.maps.model.LatLng(24.0, -125.0))\r\n        .include(com.google.android.gms.maps.model.LatLng(49.0, -66.0))\r\n        .build(),\r\n    transparency: Float = 0.3f,  // 0.0 is fully opaque, 1.0 is fully transparent\r\n    zIndex: Float = 0f\r\n) {\r\n    var bitmap by remember { mutableStateOf<Bitmap?>(null) }\r\n\r\n    var isLoading by remember { mutableStateOf(false) }\r\n    var loadError by remember { mutableStateOf<String?>(null) }\r\n\r\n    // Load bitmap from URL\r\n    LaunchedEffect(imageUrl, visible) {\r\n        if (imageUrl != null && visible) {\r\n            isLoading = true\r\n            loadError = null\r\n            try {\r\n                Log.d(\"WeatherOverlay\", \"Starting to load bitmap from URL: $imageUrl\")\r\n                bitmap = loadBitmapFromUrl(imageUrl)\r\n                if (bitmap != null) {\r\n                    Log.d(\"WeatherOverlay\", \"Bitmap loaded: ${bitmap?.width}x${bitmap?.height}\")\r\n                } else {\r\n                    Log.e(\"WeatherOverlay\", \"Failed to load bitmap - result was null\")\r\n                    loadError = \"Failed to load overlay image\"\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e(\"WeatherOverlay\", \"Error loading bitmap: ${e.message}\")\r\n                loadError = e.message\r\n                bitmap = null\r\n            } finally {\r\n                isLoading = false\r\n            }\r\n        } else {\r\n            bitmap = null\r\n            isLoading = false\r\n            loadError = null\r\n        }\r\n    }\r\n\r\n    // Convert bitmap to BitmapDescriptor\r\n    val bitmapDescriptor = remember(bitmap) {\r\n        bitmap?.let { BitmapDescriptorFactory.fromBitmap(it) }\r\n    }\r\n\r\n    // Add overlay to map if everything is ready\r\n    if (visible && bitmapDescriptor != null) {\r\n        GroundOverlay(\r\n            position = GroundOverlayPosition.create(bounds),\r\n            image = bitmapDescriptor,\r\n            transparency = transparency,\r\n            visible = true,\r\n            zIndex = zIndex\r\n        )\r\n    }\r\n\r\n    // Clean up bitmap\r\n    DisposableEffect(imageUrl) {\r\n        onDispose {\r\n            bitmap = null\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper to load a Bitmap from a URL on an IO thread.\r\n */\r\nprivate suspend fun loadBitmapFromUrl(urlString: String): Bitmap? {\r\n    return withContext(Dispatchers.IO) {\r\n        var connection: HttpURLConnection? = null\r\n        try {\r\n            val url = URL(urlString)\r\n            connection = url.openConnection() as HttpURLConnection\r\n            connection.doInput = true\r\n            connection.connectTimeout = 30000  // 30-second timeout\r\n            connection.readTimeout = 30000\r\n            connection.connect()\r\n\r\n            val responseCode = connection.responseCode\r\n            if (responseCode != HttpURLConnection.HTTP_OK) {\r\n                Log.e(\"WeatherOverlay\", \"HTTP error when loading bitmap: $responseCode ${connection.responseMessage}\")\r\n                return@withContext null\r\n            }\r\n\r\n            val input: InputStream = connection.inputStream\r\n            BitmapFactory.decodeStream(input)\r\n        } catch (e: Exception) {\r\n            Log.e(\"WeatherOverlay\", \"Error loading bitmap: ${e.message}\")\r\n            null\r\n        } finally {\r\n            connection?.disconnect()\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/stoneCode/rain_alert/ui/map/DirectMapOverlay.kt b/app/src/main/java/com/stoneCode/rain_alert/ui/map/DirectMapOverlay.kt
--- a/app/src/main/java/com/stoneCode/rain_alert/ui/map/DirectMapOverlay.kt	(revision 53f051acc55df57f474c72f304b87499479dfe28)
+++ b/app/src/main/java/com/stoneCode/rain_alert/ui/map/DirectMapOverlay.kt	(date 1741534720296)
@@ -18,16 +18,15 @@
  * A Composable that adds a ground overlay to a Google Map using Jetpack Compose.
  * Enhanced version with better error handling and loading indicator.
  *
- * This file is unchanged from before; the main layering fixes are done by adjusting
- * z-indexes in the call sites (i.e., RadarMapComponent).
+ * This version is updated to handle fixed URLs for weather layers.
  */
 @Composable
 fun WeatherOverlay(
     imageUrl: String?,
     visible: Boolean = true,
     bounds: LatLngBounds = LatLngBounds.builder()
-        .include(com.google.android.gms.maps.model.LatLng(24.0, -125.0))
-        .include(com.google.android.gms.maps.model.LatLng(49.0, -66.0))
+        .include(com.google.android.gms.maps.model.LatLng(24.0, -125.0)) // Southwest corner
+        .include(com.google.android.gms.maps.model.LatLng(49.0, -66.0))  // Northeast corner
         .build(),
     transparency: Float = 0.3f,  // 0.0 is fully opaque, 1.0 is fully transparent
     zIndex: Float = 0f
